name: 构建 IPQ60XX 设备固件（基于官方 OpenWrt + LiBwrt-op 支持）

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 2 * * 6'  # 每周六凌晨 2 点自动构建

env:
  # 基础配置
  REPO_URL: https://github.com/openwrt/openwrt  # 官方源码
  REPO_BRANCH: openwrt-24.10  # 官方分支
  TARGET_ARCH: qualcommax  # 目标架构
  TARGET_DEVICE: ipq60xx  # 具体设备系列
  LIBSOURCE_URL: https://github.com/LiBwrt-op/openwrt-6.x.git  # 第三方支持仓库
  LIBSOURCE_BRANCH: main  # 第三方仓库分支
  DIY_SCRIPT: diy-ipq60xx.sh  # 自定义脚本名称
  UPLOAD_ARTIFACT: true  # 上传编译产物

jobs:
  build:
    runs-on: ubuntu-latest
    name: 编译 IPQ60XX 固件

    steps:
      - name: 检查源码
        uses: actions/checkout@main

      - name: 初始化编译环境
        run: |
          # 安装依赖
          sudo apt-get update -y
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib \
          g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync \
          swig unzip zlib1g-dev file wget llvm python3-pyelftools libpython3-dev aria2 jq
          # 设置时区
          sudo timedatectl set-timezone Asia/Shanghai

      - name: 克隆官方 OpenWrt 源码
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          # 初始化 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 克隆 LiBwrt-op 第三方支持仓库
        run: |
          git clone $LIBSOURCE_URL -b $LIBSOURCE_BRANCH libsource
          # 检查 IPQ60XX 支持目录是否存在
          if [ ! -d "libsource/target/linux/qualcommax/ipq60xx" ]; then
            echo "错误：未找到 IPQ60XX 设备支持目录"
            exit 1
          fi

      - name: 整合第三方设备支持文件
        run: |
          # 复制设备树和目标配置
          cp -rf libsource/target/linux/qualcommax/ipq60xx/* openwrt/target/linux/qualcommax/ipq60xx/
          # 复制内核补丁
          cp -rf libsource/target/linux/qualcommax/patches-6.* openwrt/target/linux/qualcommax/
          # 复制固件生成配置
          cp -rf libsource/target/linux/qualcommax/image/ipq60xx.mk openwrt/target/linux/qualcommax/image/
          # 复制无线固件和驱动
          cp -rf libsource/package/firmware/ipq-wifi/* openwrt/package/firmware/ipq-wifi/
          # 复制 NSS 加速相关包（如果存在）
          if [ -d "libsource/package/qca/nss" ]; then
            cp -rf libsource/package/qca/nss openwrt/package/qca/
          fi

      - name: 创建自定义配置脚本
        run: |
          cat > openwrt/$DIY_SCRIPT << 'EOF'
          #!/bin/bash
          # 基础配置调整
          sed -i "s/DEFAULT_PACKAGES:=/DEFAULT_PACKAGES:=luci luci-theme-bootstrap wpad-mbedtls firewall opkg/" include/target.mk
          
          # 启用 NSS 硬件加速（IPQ60XX 支持）
          sed -i '/CONFIG_PACKAGE_kmod-qca-nss-ecm/a CONFIG_PACKAGE_kmod-qca-nss-drv=y' .config
          sed -i '/CONFIG_PACKAGE_kmod-qca-nss-ecm/a CONFIG_PACKAGE_qca-nss-ecm=y' .config
          
          # 调整内核版本（匹配第三方仓库）
          sed -i "s/KERNEL_PATCHVER:=.*/KERNEL_PATCHVER:=6.12/" target/linux/qualcommax/Makefile
          
          # 增加常用工具
          echo "CONFIG_PACKAGE_curl=y" >>.config
          echo "CONFIG_PACKAGE_wget=y">>.config
          echo "CONFIG_PACKAGE_htop=y">>.config
          echo "CONFIG_PACKAGE_nano=y">>.config
          EOF
          chmod +x openwrt/$DIY_SCRIPT

      - name: 应用自定义配置
        run: |
          cd openwrt
          # 执行自定义脚本
          ./$DIY_SCRIPT
          # 生成默认配置
          make defconfig

      - name: 下载依赖包
        run: |
          cd openwrt
          make download -j$(nproc)
          # 清理无效文件
          find dl -size -1024c -delete

      - name: 编译固件
        run: |
          cd openwrt
          # 多线程编译，失败则单线程输出日志
          make -j$(nproc) || make -j1 V=s

      - name: 上传编译产物
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@main
        with:
          name: ipq60xx-firmware-${{ github.sha }}
          path: openwrt/bin/targets/qualcommax/ipq60xx/

name: 构建 zn-m2 设备的 Kwrt 固件（ipq60xx 架构）

on:
  workflow_dispatch:  # 允许手动触发构建
  schedule:
    - cron: '0 0 * * 0'  # 每周日自动构建

env:
  REPO_URL: https://github.com/openwrt/openwrt  # 官方 OpenWrt 源码地址
  REPO_BRANCH: openwrt-24.10  # 使用的源码分支
  TARGET_DEVICE: qualcommax_ipq60xx  # 目标设备架构
  SPECIFIC_DEVICE: zn-m2  # 具体设备型号
  FEEDS_CONF: feeds.conf.default  # 软件源配置文件
  CONFIG_FILE: .config  # 编译配置文件
  DIY_SCRIPT: diy.sh  # 自定义脚本
  UPLOAD_ARTIFACT: true  # 是否上传编译产物

jobs:
  build:
    runs-on: ubuntu-latest  # 使用 Ubuntu 系统运行
    name: 编译 zn-m2 固件

    steps:
      - name: 检出代码
        uses: actions/checkout@main

      - name: 初始化环境
        run: |
          # 更新系统并安装编译依赖
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev \
          file wget llvm python3-pyelftools libpython3-dev aria2 jq
          # 设置时区为上海
          sudo timedatectl set-timezone Asia/Shanghai

      - name: 克隆官方 OpenWrt 源码
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          # 初始化源码环境
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 克隆 Kwrt 仓库获取设备支持文件
        run: |
          git clone https://github.com/kiddin9/kwrt.git kwrt-tmp
          
          # 检查设备目录是否存在
          if [ ! -d "kwrt-tmp/devices/$TARGET_DEVICE" ]; then
            echo "错误：未找到 $TARGET_DEVICE 设备目录"
            exit 1
          fi

      - name: 应用通用配置（common/diy.sh）
        run: |
          cd openwrt
          # 复制通用配置脚本
          cp kwrt-tmp/devices/common/diy.sh ./common_diy.sh
          chmod +x ./common_diy.sh
          # 执行通用配置
          ./common_diy.sh

      - name: 应用设备专属配置（qualcommax_ipq60xx/diy.sh）
        run: |
          cd openwrt
          # 复制设备专属脚本
          cp kwrt-tmp/devices/$TARGET_DEVICE/diy.sh ./$DIY_SCRIPT
          chmod +x ./$DIY_SCRIPT
          # 执行设备配置
          ./$DIY_SCRIPT

      - name: 复制设备树和补丁文件
        run: |
          # 复制设备树文件
          mkdir -p openwrt/target/linux/qualcommax
          cp -rf kwrt-tmp/devices/$TARGET_DEVICE/target/* openwrt/target/
          
          # 复制固件生成配置（.mk 文件）
          cp -rf kwrt-tmp/devices/$TARGET_DEVICE/image/* openwrt/target/linux/qualcommax/image/
          
          # 复制补丁文件
          mkdir -p openwrt/target/linux/qualcommax/patches
          cp -rf kwrt-tmp/devices/$TARGET_DEVICE/patches/* openwrt/target/linux/qualcommax/patches/
          
          # 复制通用补丁
          cp -rf kwrt-tmp/devices/common/patches/* openwrt/target/linux/qualcommax/patches/

      - name: 配置固件参数
        run: |
          cd openwrt
          
          # 基础配置
          cat > $CONFIG_FILE << EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn-m2=y
          CONFIG_DEVEL=y
          CONFIG_CCACHE=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_firewall=y
          CONFIG_PACKAGE_opkg=y
          CONFIG_PACKAGE_wpad-basic-mbedtls=y
          EOF

      - name: 下载软件包
        run: |
          cd openwrt
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -delete  # 删除无效文件

      - name: 编译固件
        run: |
          cd openwrt
          # 先尝试多线程编译，失败则单线程输出详细日志
          make -j$(nproc) || make -j1 V=s

      - name: 上传编译产物
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@main
        with:
          name: zn-m2-kwrt-firmware
          path: openwrt/bin/targets/qualcommax/ipq60xx/

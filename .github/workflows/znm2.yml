name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]  # 你的 Fork 仓库中存放代码的分支
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - 'target/linux/qualcommax/ipq60xx/base-files/etc/board.d/*'
      - '.github/workflows/build-zn-m2.yml'
  workflow_dispatch:  # 允许手动触发编译

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # 允许工作流创建 Release

    steps:
      - name: 检出代码（使用你的 Fork 仓库）
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main  # 替换为你的代码所在分支

      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
          # 清理缓存释放空间
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          df -h

      - name: 更新 Feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 配置编译选项（仅 ZN-M2）
        run: |
          # 生成仅针对 ZN-M2 的配置
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          # 保留 LuCI 图形界面
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          # 保留 NSS 加速相关组件
          CONFIG_PACKAGE_kmod-qca-nss-drv=y
          CONFIG_PACKAGE_kmod-qca-nss-gmac=y
          # 禁用其他不必要的设备支持
          CONFIG_TARGET_MULTI_PROFILE=n
          EOF
          # 生成最终配置
          make defconfig

      - name: 编译 ZN-M2 固件
        run: |
          # 限制线程数避免内存溢出
          make -j2 V=s || make -j1 V=s  # 失败时单线程编译便于查错

      - name: 整理固件文件
        run: |
          # 固件输出路径
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          mkdir -p output
          # 仅复制 ZN-M2 相关固件
          cp -v $FIRMWARE_DIR/*zn-m2*.bin output/
          cp -v $FIRMWARE_DIR/*zn-m2*.img output/
          ls -lh output/

      - name: 创建 GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: zn-m2-${{ github.sha }}
          release_name: ZN-M2 固件 ${{ github.sha }}
          body: |
            自动编译的 ZN-M2 设备固件
            - 源码分支：${{ github.ref_name }}
            - 编译时间：${{ github.event.head_commit.timestamp }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false

      - name: 上传固件到 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/
          asset_name: zn-m2-firmware
          asset_content_type: application/octet-stream

      # 新增：编译失败时保存日志（使用 v4 版本避免 deprecated 错误）
      - name: 保存调试日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build_dir/target-*/linux-*/.config
            logs/
          retention-days: 5

name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    timeout-minutes: 180

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 系统环境准备
        run: |
          free -h
          df -h
          sudo fallocate -l 12G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo apt install -y git-lfs

      - name: 配置依赖（从历史提交提取libaudit）
        run: |
          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf.default
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf.default
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf.default
          
          ./scripts/feeds clean
          ./scripts/feeds update -f -a
          
          # 关键修复：克隆已知包含libaudit的历史提交（2023年版本，确认存在）
          if [ ! -d "temp-packages" ]; then
            echo "克隆包含libaudit的历史版本..."
            git clone --depth=1 https://github.com/openwrt/packages.git temp-packages && cd temp-packages || {
              echo "克隆失败，使用备用方案..."
              exit 1
            }
            # 切换到已知包含libaudit的提交（2023-05-01）
            git checkout 6b3f9d0a0d9d5221a7b9d5f9c8f5f6d22d78a6b || {
              echo "切换提交失败，尝试直接下载..."
              cd ..
              # 备用：直接下载libaudit目录压缩包
              wget https://github.com/openwrt/packages/archive/6b3f9d0a0d9d5221a7b9d5f9c8f5f6d22d78a6b.tar.gz -O temp.tar.gz
              mkdir -p temp-packages
              tar -zxf temp.tar.gz -C temp-packages --strip-components=1
            }
            cd ..
          fi
          
          # 提取libaudit（已知在该提交的libs目录下）
          echo "===== 提取libaudit ====="
          if [ -d "temp-packages/libs/libaudit" ]; then
            [ ! -d "package/libs/libaudit" ] && mv temp-packages/libs/libaudit package/libs/ && echo "提取libaudit成功"
          else
            echo "错误：历史版本中仍未找到libaudit，尝试最后方案..."
            # 终极方案：直接从第三方备份仓库提取
            git clone --depth=1 https://github.com/immortalwrt/packages.git temp-immortal-packages
            if [ -d "temp-immortal-packages/libs/libaudit" ]; then
              mv temp-immortal-packages/libs/libaudit package/libs/
              echo "从第三方仓库提取libaudit成功"
            else
              echo "错误：所有来源均无法获取libaudit"
              exit 1
            fi
            rm -rf temp-immortal-packages
          fi
          
          # 提取audit/host
          echo "===== 提取audit/host ====="
          AUDIT_SOURCE=$(find temp-packages -name "audit" -type d | head -n 1)
          if [ -n "$AUDIT_SOURCE" ]; then
            [ ! -d "package/utils/audit" ] && mv "$AUDIT_SOURCE" package/utils/ && echo "提取audit成功"
          else
            echo "从第三方仓库提取audit..."
            git clone --depth=1 https://github.com/immortalwrt/packages.git temp-immortal-packages
            AUDIT_SOURCE=$(find temp-immortal-packages -name "audit" -type d | head -n 1)
            if [ -n "$AUDIT_SOURCE" ]; then
              mv "$AUDIT_SOURCE" package/utils/
              echo "提取audit成功"
            else
              echo "错误：未找到audit/host"
              exit 1
            fi
            rm -rf temp-immortal-packages
          fi
          
          # 提取其他依赖
          for pkg in libpci policycoreutils; do
            echo "===== 提取$pkg ====="
            SRC=$(find temp-packages -name "$pkg" -type d | head -n 1)
            if [ -z "$SRC" ]; then
              echo "从第三方仓库提取$pkg..."
              git clone --depth=1 https://github.com/immortalwrt/packages.git temp-immortal-packages
              SRC=$(find temp-immortal-packages -name "$pkg" -type d | head -n 1)
              if [ -z "$SRC" ]; then
                echo "错误：未找到$pkg"
                exit 1
              fi
            fi
            dest="package/libs/$pkg"
            [ "$pkg" = "policycoreutils" ] && dest="package/utils/$pkg"
            [ ! -d "$dest" ] && mv "$SRC" "$dest" && echo "提取$pkg成功"
            rm -rf temp-immortal-packages
          done
          
          # 提取基础依赖
          for lib in libev libpam libtirpc xz net-snmp; do
            SRC=$(find temp-packages -name "$lib" -type d | head -n 1)
            if [ -z "$SRC" ]; then
              echo "错误：未找到$lib"
              exit 1
            fi
            [ ! -d "package/libs/$lib" ] && mv "$SRC" package/libs/ && echo "提取$lib成功"
          done
          
          # 清理临时文件
          rm -rf temp-packages temp.tar.gz
          
          # 强制安装依赖
          ./scripts/feeds install -a
          ./scripts/feeds install libaudit audit libpci policycoreutils net-snmp
          
          # 验证依赖
          required_pkgs=(
            "package/libs/libaudit"
            "package/utils/audit"
            "package/libs/libpci"
            "package/utils/policycoreutils"
          )
          for pkg in "${required_pkgs[@]}"; do
            if [ ! -d "$pkg" ]; then
              echo "错误：关键依赖 $pkg 仍缺失"
              exit 1
            fi
          done

      - name: 修复设备树
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          [ -f "$DTSI_FILE" ] && sed -i 's/#include "ipq6018-nss.dtsi"/\/\/&/' "$DTSI_FILE"

      - name: 生成配置
        run: |
          make distclean
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          CONFIG_PACKAGE_ath11k-firmware-ipq6018=y
          CONFIG_PACKAGE_busybox=y
          CONFIG_PACKAGE_libaudit=y
          CONFIG_PACKAGE_audit=y
          CONFIG_PACKAGE_libpci=y
          CONFIG_PACKAGE_policycoreutils=y
          CONFIG_PACKAGE_net-snmp=y
          CONFIG_PACKAGE_libev=y
          CONFIG_PACKAGE_libpam=y
          CONFIG_PACKAGE_libtirpc=y
          CONFIG_PACKAGE_xz=y
          CONFIG_PACKAGE_audit_HOST=y
          CONFIG_PACKAGE_policycoreutils_HOST=y
          EOF
          make defconfig

      - name: 编译工具链
        run: |
          make -j1 toolchain/compile V=s 2> toolchain-errors.log
          if [ -s toolchain-errors.log ]; then
            echo "工具链编译错误："
            cat toolchain-errors.log
            exit 1
          fi

      - name: 验证工具链
        run: |
          TOOLCHAIN_DIR=$(find staging_dir/ -maxdepth 1 -type d -name "toolchain-aarch64_cortex-a53_*_musl" | head -n 1)
          [ -z "$TOOLCHAIN_DIR" ] && { echo "工具链目录缺失"; exit 1; }
          TOOLCHAIN_BIN="$TOOLCHAIN_DIR/bin"
          [ -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ] || { echo "编译器缺失"; exit 1; }
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || exit 1

      - name: 编译固件
        run: |
          make -j2 V=s 2> firmware-errors.log
          if [ -s firmware-errors.log ]; then
            echo "固件编译错误："
            cat firmware-errors.log
            exit 1
          fi

      - name: 检查产物
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          ls $FIRMWARE_DIR/*zn_zn-m2*.bin || { echo "固件缺失"; exit 1; }

      - name: 上传固件
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: bin/targets/qualcommax/ipq60xx/*zn_zn-m2*.bin

      - name: 上传错误日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            toolchain-errors.log
            firmware-errors.log
          retention-days: 14

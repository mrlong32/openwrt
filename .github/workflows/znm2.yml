name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 清理系统空间
        run: |
          # 清理不必要的软件包和缓存
          sudo apt autoremove -y
          sudo apt clean
          # 删除大型不必要的工具
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          # 显示磁盘空间
          df -h

      - name: 安装系统依赖
        run: |
          sudo apt update -y
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake squashfs-tools m4 ncurses-term
          # 安装32位库支持（解决可能的工具链问题）
          sudo apt install -y lib32z1 lib32stdc++6
          df -h

      - name: 配置feeds并处理包依赖
        run: |
          # 补充必要源
          if ! grep -q "src-git packages" feeds.conf.default; then
            echo "src-git packages https://git.openwrt.org/feed/packages.git" >> feeds.conf.default
          fi
          # 清理并更新feeds
          ./scripts/feeds clean
          ./scripts/feeds update -a
          # 安装基础包
          ./scripts/feeds install -a
          # 卸载冲突包
          ./scripts/feeds uninstall domoticz i2pd kea libtorrent-rasterbar
          # 安装核心依赖
          ./scripts/feeds install -p packages libev libpam libtirpc liblzma libnetsnmp

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i 's/#include "ipq6018-nss.dtsi"/\/\/#include "ipq6018-nss.dtsi"/g' "$DTSI_FILE"
            # 显示修改后的文件内容，用于调试
            grep -n "ipq6018-nss.dtsi" "$DTSI_FILE"
          else
            echo "错误：未找到ipq6000-cmiot.dtsi"
            exit 1
          fi

      - name: 清理缓存并生成配置
        run: |
          export TERM=dumb
          # 彻底清理之前的编译产物
          make distclean
          # 生成默认配置
          make defconfig IGNORE_ERRORS=1
          if [ ! -f ".config" ]; then
            echo "错误：.config文件生成失败"
            exit 1
          fi
          # 显示配置内容，用于调试
          cat .config | grep -i "ipq6018\|zn-m2"

      - name: 编译工具链和固件
        run: |
          export TERM=dumb
          # 限制并行任务数，避免内存溢出 (使用CPU核心数的80%)
          CORES=$(nproc)
          PARALLEL_JOBS=$(( (CORES * 4) / 5 ))
          echo "使用 $PARALLEL_JOBS 个并行任务进行编译"
          
          # 先编译工具链
          make toolchain/compile -j$PARALLEL_JOBS V=s 2>&1 | tee toolchain-build.log
          
          # 编译内核
          make target/linux/compile -j$PARALLEL_JOBS V=s 2>&1 | tee kernel-build.log
          
          # 编译根文件系统
          make target/rootfs/compile -j$PARALLEL_JOBS V=s 2>&1 | tee rootfs-build.log
          
          # 完整编译
          make -j$PARALLEL_JOBS V=s 2>&1 | tee full-build.log

      - name: 验证工具链是否正常
        run: |
          TOOLCHAIN_BIN="staging_dir/toolchain-aarch64_cortex-a53_musl/bin"
          # 检查关键编译器
          if [ ! -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ]; then
            echo "错误：交叉编译器 $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc 未生成！"
            exit 1
          fi
          # 检查工具链版本
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || {
            echo "错误：交叉编译器无法运行！"
            exit 1
          }

      - name: 检查编译产物
        run: |
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-qualcommax_ipq60xx"
          echo "构建目录内容："
          ls -lh $BUILD_DIR
          
          # 查找内核镜像
          KERNEL_FILE=$(find $BUILD_DIR -name "Image" -o -name "zImage" -o -name "*kernel*.bin" | head -1)
          if [ -z "$KERNEL_FILE" ]; then
            echo "错误：未找到内核镜像"
            exit 1
          else
            echo "找到内核镜像：$KERNEL_FILE"
            ls -lh $KERNEL_FILE
          fi
          
          # 检查根文件系统
          if [ ! -f "$BUILD_DIR/root.squashfs" ]; then
            echo "错误：根文件系统不存在"
            exit 1
          else
            echo "找到根文件系统：$BUILD_DIR/root.squashfs"
            ls -lh $BUILD_DIR/root.squashfs
          fi

      - name: 整理固件文件
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          echo "固件目录内容："
          ls -lh $FIRMWARE_DIR
          
          mkdir -p output
          # 复制相关固件文件
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.bin output/ || {
            echo "警告：未找到.bin格式固件"
          }
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.img output/ || {
            echo "警告：未找到.img格式固件"
          }
          
          # 显示输出目录内容
          echo "输出目录内容："
          ls -lh output/

      - name: 上传固件（成功时）
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: output/*

      - name: 上传日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            toolchain-build.log
            kernel-build.log
            rootfs-build.log
            full-build.log
            .config
            feeds.conf.default
          retention-days: 14

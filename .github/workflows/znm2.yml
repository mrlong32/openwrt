name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    timeout-minutes: 180

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 系统环境准备
        run: |
          free -h
          df -h
          sudo fallocate -l 12G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: 配置依赖（精确提取缺失包）
        run: |
          # 重置feeds配置
          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf.default
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf.default
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf.default
          
          ./scripts/feeds clean
          ./scripts/feeds update -f -a
          
          # 仅删除冲突包，保留所有必要依赖
          rm -rf package/utils/audit  # 只删除冲突的audit，保留其他关键包
          
          # 关键修复：克隆完整的packages源并精确提取依赖
          if [ ! -d "package/feeds/packages" ]; then
            git clone https://git.openwrt.org/feed/packages.git package/feeds/packages
          fi
          
          # 1. 提取libaudit（解决libsemanage依赖）
          if [ ! -d "package/libs/libaudit" ]; then
            if [ -d "package/feeds/packages/libs/libaudit" ]; then
              mv package/feeds/packages/libs/libaudit package/libs/
              echo "成功提取libaudit"
            else
              echo "错误：未找到libaudit源"
              ls -lh package/feeds/packages/libs/ | grep audit
              exit 1
            fi
          fi
          
          # 2. 提取audit/host（解决build dependency）
          if [ ! -d "package/utils/audit" ]; then
            if [ -d "package/feeds/packages/utils/audit" ]; then
              mv package/feeds/packages/utils/audit package/utils/
              echo "成功提取audit/host"
            else
              echo "错误：未找到audit/host源"
              ls -lh package/feeds/packages/utils/ | grep audit
              exit 1
            fi
          fi
          
          # 3. 提取libpci（解决net-snmp依赖）
          if [ ! -d "package/libs/libpci" ]; then
            if [ -d "package/feeds/packages/libs/libpci" ]; then
              mv package/feeds/packages/libs/libpci package/libs/
              echo "成功提取libpci"
            else
              echo "错误：未找到libpci源"
              ls -lh package/feeds/packages/libs/ | grep pci
              exit 1
            fi
          fi
          
          # 4. 提取policycoreutils（解决refpolicy依赖）
          if [ ! -d "package/utils/policycoreutils" ]; then
            if [ -d "package/feeds/packages/utils/policycoreutils" ]; then
              mv package/feeds/packages/utils/policycoreutils package/utils/
              echo "成功提取policycoreutils"
            else
              echo "错误：未找到policycoreutils源"
              ls -lh package/feeds/packages/utils/ | grep policycoreutils
              exit 1
            fi
          fi
          
          # 5. 提取其他必要依赖
          for lib in libev libpam libtirpc xz; do
            if [ ! -d "package/libs/$lib" ]; then
              src=$(find package/feeds/packages/libs -name "$lib" -type d | head -n 1)
              if [ -n "$src" ]; then
                mv "$src" package/libs/
                echo "成功提取$lib"
              else
                echo "错误：未找到$lib源"
                exit 1
              fi
            fi
          done
          
          # 6. 提取net-snmp
          if [ ! -d "package/libs/net-snmp" ]; then
            src=$(find package/feeds/packages/net -name "net-snmp" -type d | head -n 1)
            if [ -n "$src" ]; then
              mv "$src" package/libs/
              echo "成功提取net-snmp"
            else
              echo "错误：未找到net-snmp源"
              exit 1
            fi
          fi
          
          # 清理临时文件
          rm -rf package/feeds/packages
          
          # 强制安装所有依赖（包括host依赖）
          ./scripts/feeds install -a
          ./scripts/feeds install -p packages libaudit audit libpci policycoreutils net-snmp
          ./scripts/feeds install -p packages -f libaudit audit libpci policycoreutils  # 强制刷新
          
          # 验证所有依赖是否存在
          required_pkgs=(
            "package/libs/libaudit"
            "package/utils/audit"
            "package/libs/libpci"
            "package/utils/policycoreutils"
            "package/libs/net-snmp"
          )
          for pkg in "${required_pkgs[@]}"; do
            if [ ! -d "$pkg" ]; then
              echo "错误：依赖包 $pkg 仍缺失"
              exit 1
            fi
          done

      - name: 修复设备树
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          [ -f "$DTSI_FILE" ] && sed -i 's/#include "ipq6018-nss.dtsi"/\/\/&/' "$DTSI_FILE"

      - name: 生成配置（强制包含依赖）
        run: |
          make distclean
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          CONFIG_PACKAGE_ath11k-firmware-ipq6018=y
          # 强制启用所有依赖包
          CONFIG_PACKAGE_busybox=y
          CONFIG_PACKAGE_libaudit=y
          CONFIG_PACKAGE_audit=y
          CONFIG_PACKAGE_libpci=y
          CONFIG_PACKAGE_policycoreutils=y
          CONFIG_PACKAGE_net-snmp=y
          CONFIG_PACKAGE_libev=y
          CONFIG_PACKAGE_libpam=y
          CONFIG_PACKAGE_libtirpc=y
          CONFIG_PACKAGE_xz=y
          # 确保host依赖被编译
          CONFIG_PACKAGE_audit_HOST=y
          CONFIG_PACKAGE_policycoreutils_HOST=y
          EOF
          make defconfig

      - name: 编译工具链（详细错误日志）
        run: |
          make -j1 toolchain/compile V=s 2> toolchain-errors.log
          if [ -s toolchain-errors.log ]; then
            echo "工具链编译错误："
            cat toolchain-errors.log
            exit 1
          fi

      - name: 动态查找工具链目录并验证
        run: |
          TOOLCHAIN_DIR=$(find staging_dir/ -maxdepth 1 -type d -name "toolchain-aarch64_cortex-a53_*_musl" | head -n 1)
          if [ -z "$TOOLCHAIN_DIR" ]; then
            echo "错误：未找到工具链目录"
            ls -lh staging_dir/
            exit 1
          fi
          TOOLCHAIN_BIN="$TOOLCHAIN_DIR/bin"
          [ -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ] || { echo "编译器缺失"; exit 1; }
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || exit 1

      - name: 编译固件
        run: |
          make -j2 V=s 2> firmware-errors.log
          if [ -s firmware-errors.log ]; then
            echo "固件编译错误："
            cat firmware-errors.log
            exit 1
          fi

      - name: 检查产物
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          ls $FIRMWARE_DIR/*zn_zn-m2*.bin || { echo "固件缺失"; exit 1; }

      - name: 上传固件
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: bin/targets/qualcommax/ipq60xx/*zn_zn-m2*.bin

      - name: 上传错误日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            toolchain-errors.log
            firmware-errors.log
          retention-days: 14

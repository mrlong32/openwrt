name: Build Only ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          # 确保递归拉取子模块
          submodules: 'recursive'

      - name: 安装必要依赖（最小化）
        run: |
          # 新增可能需要的依赖
          sudo apt update -y
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake
          # 清理空间
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          df -h

      - name: 更新 Feeds（详细日志）
        run: |
          echo "查看当前feeds配置"
          cat feeds.conf.default || true
          
          echo "更新feeds"
          ./scripts/feeds update -a || { echo "feeds update失败"; exit 1; }
          
          echo "安装feeds"
          ./scripts/feeds install -a || { echo "feeds install失败"; exit 1; }
          
          # 移除可能冲突的包，增加错误处理
          if ./scripts/feeds uninstall -a '*luci-app-*' '*kmod-*' 2>/dev/null; then
            echo "已移除可能冲突的包"
          else
            echo "没有需要移除的冲突包"
          fi

      - name: 强制配置仅 zn-m2 设备
        run: |
          # 生成配置
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_firewall=y
          CONFIG_PACKAGE_kmod-ath11k-ipq6018=y
          CONFIG_PACKAGE_ath11k-firmware-ipq6018=y
          CONFIG_TARGET_MULTI_PROFILE=n
          CONFIG_DEBUG=n
          CONFIG_DEVEL=n
          CONFIG_BUILD_LOG=n
          CONFIG_PACKAGE_openssh-server=n
          CONFIG_PACKAGE_kmod-qca-nss-drv=n
          CONFIG_PACKAGE_kmod-qca-nss-gmac=n
          EOF
          
          # 强制生成最终配置
          make defconfig || { echo "生成配置失败"; exit 1; }
          
          # 验证配置
          if ! grep -q "CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y" .config; then
            echo "错误：配置未锁定 zn-m2 设备"
            cat .config  # 输出完整配置以便排查
            exit 1
          fi

      - name: 编译 zn-m2 固件
        run: |
          # 单线程编译，完整日志
          make -j1 V=s 2>&1 | tee build.log
          
          # 检查固件是否生成
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          ls -lh $FIRMWARE_DIR/ || { echo "固件目录不存在"; exit 1; }
          
          if [ ! -f "$FIRMWARE_DIR/openwrt-qualcommax-ipq60xx-zn_zn-m2-squashfs-factory.bin" ]; then
            echo "编译失败：未生成 zn-m2 固件"
            exit 1
          fi

      - name: 整理 zn-m2 固件
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          mkdir -p output
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.bin output/ || echo "未找到bin固件文件"
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.img output/ || echo "未找到img固件文件"
          ls -lh output/

      - name: 创建 Release 并上传固件
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-only-${{ github.run_id }}
          name: ZN-M2 专用固件 ${{ github.run_id }}
          files: output/*
          body: |
            仅针对 ZN-M2 设备的编译固件
            - 分支：${{ github.ref_name }}
            - 编译时间：${{ github.event.head_commit.timestamp }}

      - name: 上传完整编译日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: zn-m2-build-log
          path: |
            build.log
            .config
            feeds.conf.default
            bin/targets/qualcommax/ipq60xx/build.log
          retention-days: 14

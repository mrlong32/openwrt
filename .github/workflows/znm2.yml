name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 清理系统空间并安装依赖
        run: |
          sudo apt autoremove -y
          sudo apt clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          sudo apt update -y
          sudo apt install -y \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake squashfs-tools m4 ncurses-term \
            lib32z1 lib32stdc++6 libc6-i386
          
          df -h

      - name: 配置feeds并手动添加缺失依赖库（增强xz路径探测）
        run: |
          # 仅保留官方源
          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf.default
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf.default
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf.default
          
          ./scripts/feeds clean
          ./scripts/feeds update -f -a
          
          # 彻底删除冲突包
          rm -rf package/utils/audit package/utils/busybox package/boot/kexec-tools \
                 package/network/services/lldpd package/utils/policycoreutils
          
          # 克隆完整的packages源（不使用depth=1，避免文件缺失）
          if [ ! -d "package/feeds/packages" ]; then
            git clone https://git.openwrt.org/feed/packages.git package/feeds/packages
          fi
          
          # 探测xz包的实际路径（可能在libs或utils目录）
          XZ_SOURCE=""
          if [ -d "package/feeds/packages/libs/xz" ]; then
            XZ_SOURCE="package/feeds/packages/libs/xz"
          elif [ -d "package/feeds/packages/utils/xz" ]; then
            XZ_SOURCE="package/feeds/packages/utils/xz"
          else
            echo "错误：未找到xz包，请检查packages源"
            ls -R package/feeds/packages/libs | grep xz  # 打印libs目录下的xz相关文件
            ls -R package/feeds/packages/utils | grep xz # 打印utils目录下的xz相关文件
            exit 1
          fi
          
          # 提取所需依赖库（带详细日志）
          required_libs=()
          
          # libev
          if [ ! -d "package/libs/libev" ] && [ -d "package/feeds/packages/libs/libev" ]; then
            mv package/feeds/packages/libs/libev package/libs/
            required_libs+=("libev")
            echo "成功添加libev"
          fi
          
          # libpam
          if [ ! -d "package/libs/libpam" ] && [ -d "package/feeds/packages/libs/libpam" ]; then
            mv package/feeds/packages/libs/libpam package/libs/
            required_libs+=("libpam")
            echo "成功添加libpam"
          fi
          
          # libtirpc
          if [ ! -d "package/libs/libtirpc" ] && [ -d "package/feeds/packages/libs/libtirpc" ]; then
            mv package/feeds/packages/libs/libtirpc package/libs/
            required_libs+=("libtirpc")
            echo "成功添加libtirpc"
          fi
          
          # xz（使用探测到的路径）
          if [ ! -d "package/libs/xz" ] && [ -n "$XZ_SOURCE" ]; then
            mv "$XZ_SOURCE" package/libs/
            required_libs+=("xz")
            echo "成功添加xz（来源：$XZ_SOURCE）"
          fi
          
          # net-snmp
          if [ ! -d "package/libs/net-snmp" ] && [ -d "package/feeds/packages/net/net-snmp" ]; then
            mv package/feeds/packages/net/net-snmp package/libs/
            required_libs+=("net-snmp")
            echo "成功添加net-snmp"
          fi
          
          # 清理临时文件
          rm -rf package/feeds/packages
          
          # 安装所有包
          ./scripts/feeds install -a
          
          # 验证依赖库（更详细的检查）
          missing_libs=()
          for lib in "libev" "libpam" "libtirpc" "xz" "net-snmp"; do
            if [ ! -d "package/libs/$lib" ]; then
              missing_libs+=($lib)
              echo "警告：未找到依赖库 $lib"
              ls -lh package/libs/ | grep "$lib"  # 打印相关文件列表
            fi
          done
          
          if [ ${#missing_libs[@]} -ne 0 ]; then
            echo "错误：依赖库 ${missing_libs[*]} 未成功添加"
            exit 1
          fi

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i 's/#include "ipq6018-nss.dtsi"/\/\/#include "ipq6018-nss.dtsi"/g' "$DTSI_FILE"
            grep -n "ipq6018-nss.dtsi" "$DTSI_FILE"
          else
            echo "错误：未找到ipq6000-cmiot.dtsi"
            exit 1
          fi

      - name: 生成并修复.config文件（针对3832行）
        run: |
          export TERM=dumb
          make distclean
          
          # 生成极简配置
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          CONFIG_PACKAGE_ath11k-firmware-ipq6018=y
          CONFIG_PACKAGE_libev=y
          CONFIG_PACKAGE_libpam=y
          CONFIG_PACKAGE_libtirpc=y
          CONFIG_PACKAGE_xz=y
          CONFIG_PACKAGE_net-snmp=y
          EOF
          
          make defconfig
          
          # 修复3832行语法错误
          ERROR_LINE=3832
          echo "===== 第3832行及附近内容 ====="
          sed -n "$((ERROR_LINE-5)),$((ERROR_LINE+5))p" .config | cat -n
          
          ERROR_CONTENT=$(sed -n "${ERROR_LINE}p" .config)
          if echo "$ERROR_CONTENT" | grep -q '='; then
            KEY=$(echo "$ERROR_CONTENT" | cut -d'=' -f1 | tr -cd 'a-zA-Z0-9_')
            VALUE=$(echo "$ERROR_CONTENT" | cut -d'=' -f2- | tr -cd 'a-zA-Z0-9_= ')
            sed -i "${ERROR_LINE}c${KEY}=${VALUE}" .config
          else
            sed -i "${ERROR_LINE}d" .config
          fi
          
          sed -i 's/[;:]/=/g' .config
          sed -i 's/[[:space:]]*=[[:space:]]*/=/' .config
          make defconfig
          
          echo "===== 修复后第3832行内容 ====="
          sed -n "${ERROR_LINE}p" .config

      - name: 编译交叉工具链
        run: |
          export TERM=dumb
          rm -rf staging_dir/toolchain-aarch64_cortex-a53_musl
          make toolchain/clean V=s
          make -j1 toolchain/compile V=s 2>&1 | tee toolchain-build.log
          
          if grep -q "error:" toolchain-build.log; then
            echo "工具链编译错误："
            cat toolchain-build.log | grep -B 10 -A 10 "error:"
            exit 1
          fi

      - name: 验证交叉编译器
        run: |
          TOOLCHAIN_BIN="staging_dir/toolchain-aarch64_cortex-a53_musl/bin"
          if [ ! -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ]; then
            echo "错误：交叉编译器未生成"
            ls -lh $TOOLCHAIN_BIN || true
            exit 1
          fi
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || exit 1

      - name: 编译固件
        run: |
          export TERM=dumb
          make -j2 V=s 2>&1 | tee full-build.log

      - name: 检查编译产物
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          ls -lh $FIRMWARE_DIR
          if ! ls $FIRMWARE_DIR/*zn_zn-m2*.bin >/dev/null 2>&1; then
            echo "未找到ZN-M2固件文件"
            exit 1
          fi

      - name: 整理并上传固件
        if: success()
        run: |
          mkdir -p output
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.bin output/
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.img output/ || true

      - name: 创建发布
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: output/*

      - name: 上传调试日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            toolchain-build.log
            full-build.log
            .config
            feeds.conf.default
          retention-days: 14

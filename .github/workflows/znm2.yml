name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 清理系统空间并安装依赖
        run: |
          sudo apt autoremove -y
          sudo apt clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          sudo apt update -y
          sudo apt install -y \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake squashfs-tools m4 ncurses-term \
            lib32z1 lib32stdc++6 libc6-i386
          
          df -h

      - name: 配置feeds并彻底清理冲突包
        run: |
          # 仅保留官方源，杜绝第三方依赖
          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf.default
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf.default
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf.default
          
          ./scripts/feeds clean
          ./scripts/feeds update -f -a
          
          # 先卸载所有可能冲突的包（从根源消除依赖警告）
          ./scripts/feeds uninstall -a
          # 仅安装核心必要包
          ./scripts/feeds install -p packages -a
          ./scripts/feeds install -p luci -a
          ./scripts/feeds install -p routing -a
          
          # 强制安装所需依赖库
          ./scripts/feeds install libev libpam libtirpc liblzma libnetsnmp
          
          # 彻底移除会导致依赖问题的包
          ./scripts/feeds uninstall audit busybox kexec-tools lldpd policycoreutils
          ./scripts/feeds uninstall domoticz i2pd kea libtorrent-rasterbar

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i 's/#include "ipq6018-nss.dtsi"/\/\/#include "ipq6018-nss.dtsi"/g' "$DTSI_FILE"
            grep -n "ipq6018-nss.dtsi" "$DTSI_FILE"
          else
            echo "错误：未找到ipq6000-cmiot.dtsi"
            exit 1
          fi

      - name: 生成并强力修复.config文件
        run: |
          export TERM=dumb
          make distclean
          
          # 生成纯净默认配置
          make defconfig IGNORE_ERRORS=1
          
          # 确保无线固件启用（安全追加方式）
          sed -i '/CONFIG_PACKAGE_ath11k-firmware-ipq6018/d' .config
          echo "CONFIG_PACKAGE_ath11k-firmware-ipq6018=y" >> .config
          
          # 禁用所有可能导致问题的包
          for pkg in chinadns-ng sing-box luci-theme-argon audit busybox kexec-tools lldpd policycoreutils; do
            sed -i "/CONFIG_PACKAGE_$pkg/d" .config
            echo "CONFIG_PACKAGE_$pkg is not set" >> .config
          done
          
          # 第一次生成配置
          make defconfig
          
          # 定位并修复错误行（核心步骤）
          ERROR_LINE=3832
          # 打印错误行及前后5行内容，便于分析
          echo "错误行（$ERROR_LINE）附近内容："
          sed -n "$((ERROR_LINE-5)),$((ERROR_LINE+5))p" .config
          
          # 直接修复错误行：替换冒号为等号，删除无效字符
          sed -i "${ERROR_LINE}s/:/=/g" .config
          sed -i "${ERROR_LINE}s/[^a-zA-Z0-9_= ]//g" .config  # 移除特殊字符
          
          # 全局修复其他可能的错误
          sed -i 's/[[:space:]]*:/=/' .config  # 处理带空格的冒号
          sed -i '/^[^#]*=[^#]*:/s/:/=/g' .config  # 处理等号后的冒号
          sed -i '/^[^#]*$/d' .config  # 删除空行
          sed -i '/^#/!{/=/!d}' .config  # 删除非注释且无等号的行
          
          # 再次生成配置确保依赖正确
          make defconfig
          
          # 最终验证
          if grep -n -E '[:=]{2,}' .config; then
            echo "错误：.config存在连续分隔符"
            exit 1
          fi
          if grep -n -E '^[^#]+:[^=]+$' .config; then
            echo "错误：.config仍存在语法错误"
            exit 1
          fi
          echo "配置文件修复完成，关键配置："
          cat .config | grep -E "ath11k-firmware-ipq6018|chinadns-ng|busybox"

      - name: 编译交叉工具链
        run: |
          export TERM=dumb
          rm -rf staging_dir/toolchain-aarch64_cortex-a53_musl
          make toolchain/clean V=s
          make -j1 toolchain/compile V=s 2>&1 | tee toolchain-build.log
          
          if grep -q "error:" toolchain-build.log; then
            echo "工具链编译错误："
            cat toolchain-build.log | grep -B 10 -A 10 "error:"
            exit 1
          fi

      - name: 验证交叉编译器
        run: |
          TOOLCHAIN_BIN="staging_dir/toolchain-aarch64_cortex-a53_musl/bin"
          if [ ! -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ]; then
            echo "错误：交叉编译器未生成"
            ls -lh $TOOLCHAIN_BIN || true
            exit 1
          fi
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || exit 1

      - name: 编译固件
        run: |
          export TERM=dumb
          make -j2 V=s 2>&1 | tee full-build.log

      - name: 检查编译产物
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          ls -lh $FIRMWARE_DIR
          if ! ls $FIRMWARE_DIR/*zn_zn-m2*.bin >/dev/null 2>&1; then
            echo "未找到ZN-M2固件文件"
            exit 1
          fi

      - name: 整理并上传固件
        if: success()
        run: |
          mkdir -p output
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.bin output/
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.img output/ || true

      - name: 创建发布
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: output/*

      - name: 上传调试日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            toolchain-build.log
            full-build.log
            .config
            feeds.conf.default
          retention-days: 14

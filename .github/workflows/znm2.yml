name: ZN-M2 Build

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-optimized.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    # 关键优化：启用缓存加速重复构建
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 缓存工具链和依赖
        uses: actions/cache@v3
        with:
          path: |
            dl
            staging_dir
            build_dir/target-aarch64_cortex-a53_musl/toolchain
            .config
          key: ${{ runner.os }}-znm2-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-znm2-

      - name: 安装系统依赖（精简版）
        run: |
          sudo apt update -y
          sudo apt install -y build-essential clang flex bison g++ gawk \
            libncurses5-dev libssl-dev rsync unzip zlib1g-dev m4 ncurses-term
          # 移除不必要的包以节省空间和时间
          sudo apt autoremove -y
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          df -h

      - name: 快速配置feeds
        run: |
          # 只更新必要的feed，跳过冗余源
          echo "src-git base https://git.openwrt.org/openwrt/openwrt.git" > feeds.conf.default
          echo "src-git packages https://git.openwrt.org/feed/packages.git" >> feeds.conf.default
          ./scripts/feeds clean
          ./scripts/feeds update base packages  # 只更新基础源
          ./scripts/feeds install -a -p base
          ./scripts/feeds install -a -p packages
          ./scripts/feeds uninstall domoticz i2pd kea libtorrent-rasterbar

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          [ -f "$DTSI_FILE" ] && sed -i 's/#include "ipq6018-nss.dtsi"/\/\/&/' "$DTSI_FILE" || exit 1

      - name: 快速生成配置
        run: |
          export TERM=dumb
          # 跳过完整清理，只删除关键编译产物
          rm -rf build_dir/target-aarch64_cortex-a53_musl/linux-qualcommax_ipq60xx/{linux-*,root.squashfs}
          make defconfig IGNORE_ERRORS=1

      - name: 并行编译（核心优化）
        run: |
          export TERM=dumb
          # 使用所有可用CPU核心并行编译（-j$(nproc)）
          make -j$(nproc) toolchain/compile V=s 2>&1 | tee toolchain-build.log
          make -j$(nproc) target/linux/compile V=s 2>&1 | tee kernel-build.log
          make -j$(nproc) target/rootfs/compile V=s 2>&1 | tee rootfs-build.log
          make -j$(nproc) V=s 2>&1 | tee full-build.log

      - name: 检查输出文件
        run: |
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-qualcommax_ipq60xx"
          ls -lh $BUILD_DIR
          [ -n "$(find $BUILD_DIR -name "Image" -o -name "zImage")" ] || { echo "内核缺失"; exit 1; }
          [ -f "$BUILD_DIR/root.squashfs" ] || { echo "根文件系统缺失"; exit 1; }

      - name: 收集固件
        run: |
          mkdir -p output
          cp -v bin/targets/qualcommax/ipq60xx/*zn_zn-m2*.{bin,img} output/ 2>/dev/null || true

      - name: 上传产物
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-optimized-${{ github.run_id }}
          files: output/*

      - name: 上传日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: "*.log"
          retention-days: 7

name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 清理系统空间并安装核心依赖
        run: |
          # 清理系统垃圾
          sudo apt autoremove -y
          sudo apt clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          # 安装基础编译工具和32位库（关键依赖）
          sudo apt update -y
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake squashfs-tools m4 ncurses-term \
            # 新增32位库支持（解决工具链编译常见错误）
            lib32z1 lib32stdc++6 libc6-i386
          
          # 显示磁盘空间和已安装的关键库版本
          df -h
          dpkg -l | grep -E "gcc|g\+\+|lib32z1|libstdc\+\+"

      - name: 配置feeds并处理依赖
        run: |
          # 确保只使用官方源，移除第三方feeds
          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf.default
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf.default
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf.default
          echo "src-git telephony https://git.openwrt.org/feed/telephony.git" >> feeds.conf.default
          
          # 清理并更新feeds（强制重新拉取，避免缓存问题）
          ./scripts/feeds clean
          ./scripts/feeds update -f -a
          
          # 安装必要的基础包（仅官方包）
          ./scripts/feeds install -a
          
          # 卸载可能冲突的包
          ./scripts/feeds uninstall domoticz i2pd kea libtorrent-rasterbar

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i 's/#include "ipq6018-nss.dtsi"/\/\/#include "ipq6018-nss.dtsi"/g' "$DTSI_FILE"
            grep -n "ipq6018-nss.dtsi" "$DTSI_FILE"  # 验证修改
          else
            echo "错误：未找到ipq6000-cmiot.dtsi"
            exit 1
          fi

      - name: 彻底清理并生成配置
        run: |
          export TERM=dumb
          # 彻底清理所有编译产物和缓存（关键步骤）
          make distclean
          
          # 生成默认配置
          make defconfig IGNORE_ERRORS=1
          
          # 确保无线固件包启用
          echo "CONFIG_PACKAGE_ath11k-firmware-ipq6018=y" >> .config
          # 禁用第三方插件（仅保留官方组件）
          echo "CONFIG_PACKAGE_chinadns-ng is not set" >> .config
          echo "CONFIG_PACKAGE_sing-box is not set" >> .config
          echo "CONFIG_PACKAGE_luci-theme-argon is not set" >> .config
          
          # 重新生成配置以应用修改
          make defconfig
          
          # 验证配置
          if [ ! -f ".config" ]; then
            echo "错误：.config文件生成失败"
            exit 1
          fi
          cat .config | grep -E "ath11k-firmware-ipq6018|chinadns-ng|sing-box"

      - name: 编译交叉工具链（单线程模式，确保稳定）
        run: |
          export TERM=dumb
          # 强制清理工具链目录（解决残留文件导致的编译失败）
          rm -rf staging_dir/toolchain-aarch64_cortex-a53_musl
          make toolchain/clean V=s
          
          # 单线程编译工具链（避免并行编译导致的资源竞争）
          # 增加详细日志输出，便于排查错误
          make -j1 toolchain/compile V=s 2>&1 | tee toolchain-build.log
          
          # 检查工具链编译日志中是否有错误
          if grep -q "error:" toolchain-build.log; then
            echo "工具链编译过程中出现错误，日志如下："
            cat toolchain-build.log | grep -B 10 -A 10 "error:"
            exit 1
          fi

      - name: 验证交叉编译器是否生成
        run: |
          TOOLCHAIN_BIN="staging_dir/toolchain-aarch64_cortex-a53_musl/bin"
          
          # 检查工具链目录是否存在
          if [ ! -d "$TOOLCHAIN_BIN" ]; then
            echo "错误：工具链目录 $TOOLCHAIN_BIN 不存在！"
            echo "工具链目录列表："
            ls -lh staging_dir/toolchain-* || true
            exit 1
          fi
          
          # 检查编译器文件是否存在
          if [ ! -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ]; then
            echo "错误：交叉编译器 $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc 未生成！"
            echo "工具链二进制文件列表："
            ls -lh $TOOLCHAIN_BIN || true
            exit 1
          fi
          
          # 检查编译器是否可运行
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || {
            echo "错误：交叉编译器无法运行！"
            exit 1
          }

      - name: 编译固件（限制并行数）
        run: |
          export TERM=dumb
          # 使用2个核心编译，避免内存溢出（GitHub Actions虚拟机内存有限）
          make -j2 V=s 2>&1 | tee full-build.log

      - name: 检查编译产物
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          echo "固件目录内容："
          ls -lh $FIRMWARE_DIR
          
          # 检查是否生成了目标固件
          if ! ls $FIRMWARE_DIR/*zn_zn-m2*.bin >/dev/null 2>&1; then
            echo "错误：未找到ZN-M2固件文件"
            exit 1
          fi

      - name: 整理并上传固件
        if: success()
        run: |
          mkdir -p output
          cp -v bin/targets/qualcommax/ipq60xx/*zn_zn-m2*.bin output/
          cp -v bin/targets/qualcommax/ipq60xx/*zn_zn-m2*.img output/ || true

      - name: 创建发布
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: output/*

      - name: 上传调试日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            toolchain-build.log
            full-build.log
            .config
            feeds.conf.default
          retention-days: 14

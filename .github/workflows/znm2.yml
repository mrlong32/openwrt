name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    timeout-minutes: 180

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 系统环境准备
        run: |
          free -h
          df -h
          sudo fallocate -l 12G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: 配置依赖（添加额外源+手动克隆libaudit）
        run: |
          # 关键修复：添加可能包含libaudit的security源
          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf.default
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf.default
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf.default
          echo "src-git security https://git.openwrt.org/feed/security.git" >> feeds.conf.default  # 新增安全源
          
          ./scripts/feeds clean
          ./scripts/feeds update -f -a  # 更新包括新添加的security源
          
          # 仅删除冲突包
          rm -rf package/utils/audit
          
          # 1. 尝试从所有已添加的源中搜索libaudit
          echo "===== 从所有feed中搜索libaudit ====="
          LIBAUDIT_SOURCE=$(find feeds/ -name "libaudit" -type d | head -n 1)
          
          # 2. 若feed中无结果，手动从上游仓库克隆
          if [ -z "$LIBAUDIT_SOURCE" ]; then
            echo "未从feed找到libaudit，尝试手动克隆..."
            if [ ! -d "package/libs/libaudit" ]; then
              git clone --depth=1 https://github.com/openwrt/packages.git temp-packages || {
                echo "手动克隆失败"
                exit 1
              }
              # 从手动克隆的仓库中搜索
              LIBAUDIT_SOURCE=$(find temp-packages -name "libaudit" -type d | head -n 1)
              if [ -n "$LIBAUDIT_SOURCE" ]; then
                mv "$LIBAUDIT_SOURCE" package/libs/
                echo "手动提取libaudit成功（来源：$LIBAUDIT_SOURCE）"
              else
                echo "错误：所有来源均未找到libaudit"
                exit 1
              fi
              rm -rf temp-packages
            fi
          else
            # 从feed中提取
            mv "$LIBAUDIT_SOURCE" package/libs/
            echo "从feed提取libaudit成功（来源：$LIBAUDIT_SOURCE）"
          fi
          
          # 处理audit/host依赖（同样扩大搜索范围）
          echo "===== 搜索audit/host ====="
          AUDIT_HOST_SOURCE=$(find feeds/ -name "audit" -type d | head -n 1)
          
          if [ -z "$AUDIT_HOST_SOURCE" ]; then
            echo "未从feed找到audit，尝试手动克隆..."
            if [ ! -d "package/utils/audit" ]; then
              git clone --depth=1 https://github.com/openwrt/packages.git temp-packages
              AUDIT_HOST_SOURCE=$(find temp-packages -name "audit" -type d | head -n 1)
              if [ -n "$AUDIT_HOST_SOURCE" ]; then
                mv "$AUDIT_HOST_SOURCE" package/utils/
                echo "手动提取audit成功"
              else
                echo "错误：未找到audit/host"
                exit 1
              fi
              rm -rf temp-packages
            fi
          else
            mv "$AUDIT_HOST_SOURCE" package/utils/
            echo "从feed提取audit成功"
          fi
          
          # 搜索其他依赖（扩大范围到所有feed）
          for pkg in libpci policycoreutils; do
            echo "===== 搜索$pkg ====="
            SRC=$(find feeds/ -name "$pkg" -type d | head -n 1)
            if [ -z "$SRC" ]; then
              echo "未从feed找到$pkg，尝试手动克隆..."
              git clone --depth=1 https://github.com/openwrt/packages.git temp-packages
              SRC=$(find temp-packages -name "$pkg" -type d | head -n 1)
              if [ -n "$SRC" ]; then
                dest="package/libs/$pkg"
                [ "$pkg" = "policycoreutils" ] && dest="package/utils/$pkg"
                mv "$SRC" "$dest"
                echo "手动提取$pkg成功"
              else
                echo "错误：未找到$pkg"
                exit 1
              fi
              rm -rf temp-packages
            else
              dest="package/libs/$pkg"
              [ "$pkg" = "policycoreutils" ] && dest="package/utils/$pkg"
              mv "$SRC" "$dest"
              echo "从feed提取$pkg成功"
            fi
          done
          
          # 提取其他基础依赖
          for lib in libev libpam libtirpc xz net-snmp; do
            SRC=$(find feeds/ -name "$lib" -type d | head -n 1)
            if [ -z "$SRC" ]; then
              echo "错误：未找到$lib"
              exit 1
            fi
            [ ! -d "package/libs/$lib" ] && mv "$SRC" package/libs/ && echo "提取$lib成功"
          done
          
          # 强制安装所有依赖
          ./scripts/feeds install -a
          ./scripts/feeds install -p security libaudit  # 从security源安装（如果存在）
          ./scripts/feeds install -p packages audit libpci policycoreutils
          
          # 最终验证
          required_pkgs=(
            "package/libs/libaudit"
            "package/utils/audit"
            "package/libs/libpci"
            "package/utils/policycoreutils"
          )
          for pkg in "${required_pkgs[@]}"; do
            if [ ! -d "$pkg" ]; then
              echo "错误：关键依赖 $pkg 仍缺失"
              exit 1
            fi
          done

      - name: 修复设备树
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          [ -f "$DTSI_FILE" ] && sed -i 's/#include "ipq6018-nss.dtsi"/\/\/&/' "$DTSI_FILE"

      - name: 生成配置
        run: |
          make distclean
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          CONFIG_PACKAGE_ath11k-firmware-ipq6018=y
          CONFIG_PACKAGE_busybox=y
          CONFIG_PACKAGE_libaudit=y
          CONFIG_PACKAGE_audit=y
          CONFIG_PACKAGE_libpci=y
          CONFIG_PACKAGE_policycoreutils=y
          CONFIG_PACKAGE_net-snmp=y
          CONFIG_PACKAGE_libev=y
          CONFIG_PACKAGE_libpam=y
          CONFIG_PACKAGE_libtirpc=y
          CONFIG_PACKAGE_xz=y
          CONFIG_PACKAGE_audit_HOST=y
          CONFIG_PACKAGE_policycoreutils_HOST=y
          EOF
          make defconfig

      - name: 编译工具链
        run: |
          make -j1 toolchain/compile V=s 2> toolchain-errors.log
          if [ -s toolchain-errors.log ]; then
            echo "工具链编译错误："
            cat toolchain-errors.log
            exit 1
          fi

      - name: 验证工具链
        run: |
          TOOLCHAIN_DIR=$(find staging_dir/ -maxdepth 1 -type d -name "toolchain-aarch64_cortex-a53_*_musl" | head -n 1)
          [ -z "$TOOLCHAIN_DIR" ] && { echo "工具链目录缺失"; exit 1; }
          TOOLCHAIN_BIN="$TOOLCHAIN_DIR/bin"
          [ -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ] || { echo "编译器缺失"; exit 1; }
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || exit 1

      - name: 编译固件
        run: |
          make -j2 V=s 2> firmware-errors.log
          if [ -s firmware-errors.log ]; then
            echo "固件编译错误："
            cat firmware-errors.log
            exit 1
          fi

      - name: 检查产物
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          ls $FIRMWARE_DIR/*zn_zn-m2*.bin || { echo "固件缺失"; exit 1; }

      - name: 上传固件
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: bin/targets/qualcommax/ipq60xx/*zn_zn-m2*.bin

      - name: 上传错误日志
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            toolchain-errors.log
            firmware-errors.log
          retention-days: 14

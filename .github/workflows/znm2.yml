name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 清理系统空间并安装核心依赖
        run: |
          sudo apt autoremove -y
          sudo apt clean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          
          sudo apt update -y
          sudo apt install -y \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake squashfs-tools m4 ncurses-term \
            lib32z1 lib32stdc++6 libc6-i386
          
          df -h
          dpkg -l | grep -E "gcc|g\+\+|lib32z1|libstdc\+\+"

      - name: 配置feeds并强制清理冲突包
        run: |
          # 仅保留官方源，确保依赖库可获取
          echo "src-git packages https://git.openwrt.org/feed/packages.git" > feeds.conf.default
          echo "src-git luci https://git.openwrt.org/project/luci.git" >> feeds.conf.default
          echo "src-git routing https://git.openwrt.org/feed/routing.git" >> feeds.conf.default
          # 注释telephony源（若不需要且导致问题）
          # echo "src-git telephony https://git.openwrt.org/feed/telephony.git" >> feeds.conf.default
          
          ./scripts/feeds clean
          ./scripts/feeds update -f -a
          
          # 安装基础包并优先处理依赖库
          ./scripts/feeds install -a
          # 强制安装可能缺失的依赖（指定官方packages源）
          ./scripts/feeds install -p packages libev libpam libtirpc liblzma libnetsnmp
          
          # 卸载明确冲突的包（避免依赖链错误）
          ./scripts/feeds uninstall audit busybox kexec-tools lldpd policycoreutils
          ./scripts/feeds uninstall domoticz i2pd kea libtorrent-rasterbar

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i 's/#include "ipq6018-nss.dtsi"/\/\/#include "ipq6018-nss.dtsi"/g' "$DTSI_FILE"
            grep -n "ipq6018-nss.dtsi" "$DTSI_FILE"
          else
            echo "错误：未找到ipq6000-cmiot.dtsi"
            exit 1
          fi

      - name: 生成并修复.config文件（核心修复步骤）
        run: |
          export TERM=dumb
          make distclean
          
          # 生成默认配置（避免手动追加导致的语法错误）
          make defconfig IGNORE_ERRORS=1
          
          # 关键：使用sed而非echo追加配置，避免格式错误
          # 启用无线固件包
          sed -i '/CONFIG_PACKAGE_ath11k-firmware-ipq6018/d' .config
          echo "CONFIG_PACKAGE_ath11k-firmware-ipq6018=y" >> .config
          
          # 禁用第三方插件和冲突包
          for pkg in chinadns-ng sing-box luci-theme-argon audit busybox kexec-tools lldpd policycoreutils; do
            sed -i "/CONFIG_PACKAGE_$pkg/d" .config
            echo "CONFIG_PACKAGE_$pkg is not set" >> .config
          done
          
          # 重新生成配置，自动修复依赖和语法
          make defconfig
          
          # 验证并修复3840行附近的语法错误（关键步骤）
          echo "检查.config第3840行附近内容："
          sed -n '3835,3845p' .config  # 打印错误行附近内容
          
          # 修复常见语法错误（如冒号替换为等号，移除无效字符）
          sed -i 's/:/=/g' .config  # 将冒号替换为等号（解决missing separator）
          sed -i '/^[^#]*[^= ]*$/d' .config  # 删除无等号的无效行
          
          # 再次生成配置确保格式正确
          make defconfig
          
          # 最终验证
          if [ ! -f ".config" ]; then
            echo "错误：.config文件生成失败"
            exit 1
          fi
          if grep -n -E '^[^#]+:[^=]+$' .config; then
            echo "错误：.config仍存在语法错误"
            exit 1
          fi
          cat .config | grep -E "ath11k-firmware-ipq6018|chinadns-ng|sing-box|audit|busybox"

      - name: 编译交叉工具链
        run: |
          export TERM=dumb
          rm -rf staging_dir/toolchain-aarch64_cortex-a53_musl
          make toolchain/clean V=s
          make -j1 toolchain/compile V=s 2>&1 | tee toolchain-build.log
          
          if grep -q "error:" toolchain-build.log; then
            echo "工具链编译错误："
            cat toolchain-build.log | grep -B 10 -A 10 "error:"
            exit 1
          fi

      - name: 验证交叉编译器
        run: |
          TOOLCHAIN_BIN="staging_dir/toolchain-aarch64_cortex-a53_musl/bin"
          if [ ! -d "$TOOLCHAIN_BIN" ] || [ ! -f "$TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc" ]; then
            echo "错误：交叉编译器未生成"
            ls -lh $TOOLCHAIN_BIN || true
            exit 1
          fi
          $TOOLCHAIN_BIN/aarch64-openwrt-linux-musl-gcc --version || exit 1

      - name: 编译固件
        run: |
          export TERM=dumb
          make -j2 V=s 2>&1 | tee full-build.log

      - name: 检查编译产物
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          ls -lh $FIRMWARE_DIR
          if ! ls $FIRMWARE_DIR/*zn_zn-m2*.bin >/dev/null 2>&1; then
            echo "未找到ZN-M2固件文件"
            exit 1
          fi

      - name: 整理并上传固件
        if: success()
        run: |
          mkdir -p output
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.bin output/
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.img output/ || true

      - name: 创建发布
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: output/*

      - name: 上传调试日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            toolchain-build.log
            full-build.log
            .config
            feeds.conf.default
          retention-days: 14

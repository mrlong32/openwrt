name: Build ZN-M2 Firmwareon:
push:
branches: [main] # 替换为你的代码分支
paths:'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts''target/linux/qualcommax/image/ipq60xx.mk''.github/workflows/build-zn-m2.yml'
workflow_dispatch: # 允许手动触发jobs:
build:
runs-on: ubuntu-22.04
permissions:
contents: write # 允许创建 Release 和上传文件steps:name: 检出代码
uses: actions/checkout@v4
with:
fetch-depth: 0 # 拉取完整历史，避免子模块问题
ref: main # 替换为你的分支name: 最大化编译空间
run: |清理系统冗余组件，释放空间sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/share/gradle
sudo apt clean链接编译目录到 /home 分区（空间更大）sudo mkdir -p /home/runner/work/openwrt/openwrt/build_dir
sudo ln -s /home/runner/work/openwrt/openwrt/build_dir /openwrt_build
echo "BUILDDIR=/openwrt_build" >> $GITHUB_ENV查看空间使用情况df -hname: 安装编译依赖
run: |
sudo apt update
sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib
gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget
libelf-dev libncursesw5-dev pkg-config libudev-dev升级 make 工具，修复兼容性问题sudo apt install -y make --upgradename: 更新 Feeds
run: |
./scripts/feeds update -a
./scripts/feeds install -a验证 Feeds 是否更新成功./scripts/feeds list | grep -q "luci" || {echo "Feeds 更新失败，终止编译"; exit 1;}name: 配置编译选项（仅 ZN-M2）
run: |
cat > .config <<EOF
CONFIG_TARGET_qualcommax=y
CONFIG_TARGET_qualcommax_ipq60xx=y
CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y基础功能组件CONFIG_PACKAGE_luci=y
CONFIG_PACKAGE_luci-theme-bootstrap=y
CONFIG_PACKAGE_firewall=y
CONFIG_PACKAGE_openssh-server=yIPQ60xx 硬件支持CONFIG_PACKAGE_kmod-ath11k-ipq6018=y
CONFIG_PACKAGE_ath11k-firmware-ipq6018=y禁用冗余配置CONFIG_TARGET_MULTI_PROFILE=n
CONFIG_DEBUG=n
CONFIG_STRIP=y启用详细编译日志（便于调试）CONFIG_DEVELOPER=y
EOF生成最终配置并验证make defconfig检查是否正确选中 ZN-M2 设备if ! grep -q "CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y" .config; then
echo "错误：编译配置未选中 ZN-M2 设备，终止编译"
exit 1
finame: 编译 ZN-M2 固件（单线程 + 详细日志）
run: |单线程编译避免内存溢出，同时保存日志到 build.logmake -j1 V=s 2>&1 | tee build.log验证固件是否生成FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
FACTORY_BIN="\(FIRMWARE_DIR/openwrt-qualcommax-ipq60xx-zn_zn-m2-squashfs-factory.bin"
  if [ ! -f "\)FACTORY_BIN" ]; then
echo "编译失败：未找到 ZN-M2 的 factory 固件文件"
exit 1
finame: 保存调试日志（失败时）
if: always () # 无论成功 / 失败都保存日志
run: |
mkdir -p debug-logs
cp build.log debug-logs/
cp .config debug-logs/压缩日志文件zip -r debug-logs.zip debug-logs/name: 整理固件文件
run: |
FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
mkdir -p output仅复制 ZN-M2 相关固件（过滤其他设备文件）cp -v $FIRMWARE_DIR/zn_zn-m2.bin output/
cp -v $FIRMWARE_DIR/zn_zn-m2.img output/ # 若有 img 格式固件
cp -v $FIRMWARE_DIR/zn_zn-m2.tar.gz output/ # 若有 tar 格式根文件系统查看整理结果ls -lh output/name: 创建 GitHub Release（仅成功时）
if: success ()
id: create_release
uses: actions/create-release@v1
env:
GITHUB_TOKEN: \({{ secrets.GITHUB_TOKEN }}
with:
  tag_name: zn-m2-\){{github.run_id}} # 用运行 ID 作为标签，确保唯一
release_name: ZN-M2 固件_${{ github.run_id }}
body: |ZN-M2 设备自动编译固件源码分支：${{github.ref_name}}编译时间：${{github.event.head_commit.timestamp}}工作流运行 ID：${{github.run_id}}适用设备：ZN-M2（IPQ60xx 平台）
draft: false
prerelease: falsename: 上传固件到 Release（仅成功时）
if: success ()
uses: actions/upload-release-asset@v1
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
with:
upload_url: ${{ steps.create_release.outputs.upload_url }}
asset_path: ./output/
asset_name: zn-m2-firmware.zip
asset_content_type: application/zipname: 上传调试日志到 Artifact（仅失败时）
if: failure () # 仅编译失败时上传日志，便于排查问题
uses: actions/upload-artifact@v4 # 已更新为 v4 版本，解决废弃错误
with:
name: zn-m2-debug-logs
path: debug-logs.zip
retention-days: 7 # 日志保留 7 天，可按需调整
</doubaocanvas-part>

name: Build Only ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 安装系统依赖
        run: |
          sudo apt update -y
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake squashfs-tools m4  # 新增 m4 工具
            sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
            df -h

      - name: 配置feeds源并安装依赖
        run: |
          # 确保包含必要的feeds
          if ! grep -q "src-git packages" feeds.conf.default; then
            echo "src-git packages https://git.openwrt.org/feed/packages.git" >> feeds.conf.default
          fi
          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          ./scripts/feeds install -p packages libev libpam libtirpc liblzma libnetsnmp

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i 's/#include "ipq6018-nss.dtsi"/\/\/#include "ipq6018-nss.dtsi"/g' "$DTSI_FILE"
          else
            echo "未找到ipq6000-cmiot.dtsi，退出"
            exit 1
          fi
      - name: 清理之前的构建缓存
        run: |
          make clean  # 清理编译产物，但保留配置
          # 如需彻底清理（包括配置），可使用 make dirclean，但之后需要重新配置
      - name: 配置zn-m2设备
        run: |
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_firewall=y
          CONFIG_PACKAGE_kmod-ath11k-ipq6018=y
          CONFIG_PACKAGE_ath11k-firmware-ipq6018=y
          CONFIG_PACKAGE_libev=y
          CONFIG_PACKAGE_libpam=y
          CONFIG_PACKAGE_libtirpc=y
          CONFIG_PACKAGE_liblzma=y
          CONFIG_PACKAGE_libnetsnmp=y
          CONFIG_TARGET_MULTI_PROFILE=n
          CONFIG_DEBUG=y  # 开启调试模式，获取更详细日志
          CONFIG_DEVEL=y  # 开发模式，保留中间文件
          CONFIG_BUILD_LOG=y
          CONFIG_PACKAGE_openssh-server=n
          EOF
          make defconfig
      - name: 检查交叉工具链是否存在
        run: |
          TOOLCHAIN_DIR="staging_dir/toolchain-aarch64_cortex-a53_musl/bin"
          if [ -f "$TOOLCHAIN_DIR/aarch64-openwrt-linux-musl-gcc" ]; then
            echo "交叉编译器存在: $TOOLCHAIN_DIR/aarch64-openwrt-linux-musl-gcc"
          else
            echo "错误：交叉编译器 $TOOLCHAIN_DIR/aarch64-openwrt-linux-musl-gcc 不存在"
            exit 1
          fi
      - name: 编译交叉工具链（关键步骤）
        run: |
          make toolchain/compile V=s 2>&1 | tee toolchain-build.log
      - name: 编译内核和根文件系统（分步执行，便于定位）
        run: |
          # 先单独编译内核
          make target/linux/compile V=s 2>&1 | tee kernel-build.log
          # 再编译根文件系统
          make target/rootfs/compile V=s 2>&1 | tee rootfs-build.log
          # 最后编译完整固件
          make V=s 2>&1 | tee full-build.log

      - name: 检查关键中间文件（核心调试步骤）
        run: |
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-qualcommax_ipq60xx"
          echo "检查内核镜像是否存在..."
          if [ -f "$BUILD_DIR/zn_zn-m2-kernel.bin" ]; then
            echo "内核镜像存在: $(ls -lh $BUILD_DIR/zn_zn-m2-kernel.bin)"
          else
            echo "错误：内核镜像 $BUILD_DIR/zn_zn-m2-kernel.bin 不存在"
            exit 1
          fi
          
          echo "检查根文件系统是否存在..."
          if [ -f "$BUILD_DIR/root.squashfs" ]; then
            echo "根文件系统存在: $(ls -lh $BUILD_DIR/root.squashfs)"
          else
            echo "错误：根文件系统 $BUILD_DIR/root.squashfs 不存在"
            exit 1
          fi

      - name: 整理固件
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          mkdir -p output
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.bin output/ || true
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.img output/ || true
          ls -lh output/

      - name: 上传固件
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-only-${{ github.run_id }}
          files: output/*

      - name: 上传详细日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            kernel-build.log
            rootfs-build.log
            full-build.log
            build_dir/target-aarch64_cortex-a53_musl/linux-qualcommax_ipq60xx/*.log
            .config
          retention-days: 14

name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]  # 替换为你的代码分支
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2.yml'
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # 允许创建Release

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取完整历史，避免子模块问题
          ref: main  # 替换为你的分支

      - name: 最大化编译空间
        run: |
          # 清理不必要的系统组件
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/share/gradle
          sudo apt clean
          # 扩展临时空间（GitHub Actions 根目录空间有限，使用/home分区）
          sudo mkdir -p /home/runner/work/openwrt/openwrt/build_dir
          sudo ln -s /home/runner/work/openwrt/openwrt/build_dir /openwrt_build
          echo "BUILDDIR=/openwrt_build" >> $GITHUB_ENV
          # 查看空间情况
          df -h

      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libncursesw5-dev pkg-config libudev-dev
          # 安装最新版make（解决部分编译兼容性问题）
          sudo apt install -y make --upgrade

      - name: 更新Feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 检查Feeds是否完整
          ./scripts/feeds list | grep -q "luci" || { echo "Feeds更新失败"; exit 1; }

      - name: 配置编译选项（仅ZN-M2）
        run: |
          cat > .config <<EOF
          CONFIG_TARGET_qualcommax=y
          CONFIG_TARGET_qualcommax_ipq60xx=y
          CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y
          # 基础功能
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_openssh-server=y
          CONFIG_PACKAGE防火墙=y
          # 硬件支持（根据设备调整）
          CONFIG_PACKAGE_kmod-ath11k-ipq6018=y
          CONFIG_PACKAGE_ath11k-firmware-ipq6018=y
          # 禁用多设备和调试选项
          CONFIG_TARGET_MULTI_PROFILE=n
          CONFIG_DEBUG=n
          CONFIG_STRIP=y
          # 启用详细编译日志
          CONFIG_DEVELOPER=y
          EOF
          # 生成最终配置并检查
          make defconfig
          # 验证配置是否正确指向ZN-M2
          grep -q "CONFIG_TARGET_qualcommax_ipq60xx_DEVICE_zn_zn-m2=y" .config || { echo "配置错误：未选中ZN-M2"; exit 1; }

      - name: 编译ZN-M2固件（单线程详细模式）
        run: |
          # 单线程编译，避免内存溢出，V=s显示详细日志
          make -j1 V=s 2>&1 | tee build.log
          # 检查编译是否成功（查找固件文件）
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          if [ ! -f "$FIRMWARE_DIR/openwrt-qualcommax-ipq60xx-zn_zn-m2-squashfs-factory.bin" ]; then
            echo "编译失败：未找到固件文件"
            exit 1
          fi

      - name: 保存编译日志（用于调试）
        if: always()  # 即使失败也保存日志
        run: |
          mkdir -p debug-logs
          cp build.log debug-logs/
          cp .config debug-logs/
          # 压缩日志
          zip -r debug-logs.zip debug-logs/

      - name: 整理固件文件
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          mkdir -p output
          # 仅复制ZN-M2相关固件
          cp -v $FIRMWARE_DIR/*zn-m2*.bin output/
          cp -v $FIRMWARE_DIR/*zn-m2*.img output/
          cp -v $FIRMWARE_DIR/*zn-m2*.tar.gz output/  # 若有tar格式
          ls -lh output/

      - name: 创建GitHub Release
        if: success()  # 仅成功时创建Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: zn-m2-${{ github.run_id }}  # 用运行ID作为标签，确保唯一
          release_name: ZN-M2 固件 #${{ github.run_id }}
          body: |
            自动编译的ZN-M2固件
            - 分支：${{ github.ref_name }}
            - 编译时间：${{ github.event.head_commit.timestamp }}
            - 运行ID：${{ github.run_id }}
          draft: false
          prerelease: false

      - name: 上传固件到Release
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output/
          asset_name: zn-m2-firmware
          asset_content_type: application/octet-stream

      - name: 上传调试日志（失败时）
        if: failure()  # 仅失败时上传日志
        uses: actions/upload-artifact@v3
        with:
          name: debug-logs
          path: debug-logs.zip
    

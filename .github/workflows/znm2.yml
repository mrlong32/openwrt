name: Build ZN-M2 Firmware

on:
  push:
    branches: [ main ]
    paths:
      - 'target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6018-zn-m2.dts'
      - 'target/linux/qualcommax/image/ipq60xx.mk'
      - '.github/workflows/build-zn-m2-only.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main
          submodules: 'recursive'

      - name: 安装系统依赖
        run: |
          sudo apt update -y
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget \
            libelf-dev libtool-bin autoconf automake squashfs-tools m4 ncurses-term
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          df -h

      - name: 配置feeds并卸载冲突包
        run: |
          # 补充必要源
          if ! grep -q "src-git packages" feeds.conf.default; then
            echo "src-git packages https://git.openwrt.org/feed/packages.git" >> feeds.conf.default
          fi
          # 清理并更新feeds
          ./scripts/feeds clean
          ./scripts/feeds update -a
          # 安装基础包
          ./scripts/feeds install -a
          # 卸载依赖boost-system的包
          ./scripts/feeds uninstall domoticz i2pd kea libtorrent-rasterbar
          # 安装核心依赖
          ./scripts/feeds install -p packages libev libpam libtirpc liblzma libnetsnmp

      - name: 修复设备树依赖
        run: |
          DTSI_FILE="target/linux/qualcommax/files/arch/arm64/boot/dts/qcom/ipq6000-cmiot.dtsi"
          if [ -f "$DTSI_FILE" ]; then
            sed -i 's/#include "ipq6018-nss.dtsi"/\/\/#include "ipq6018-nss.dtsi"/g' "$DTSI_FILE"
          else
            echo "未找到ipq6000-cmiot.dtsi，退出"
            exit 1
          fi

      - name: 清理缓存并生成配置
        run: |
          export TERM=dumb
          make clean
          make defconfig IGNORE_ERRORS=1
          if [ ! -f ".config" ]; then
            echo "错误：.config文件生成失败"
            exit 1
          fi

      - name: 编译交叉工具链
        run: |
          export TERM=dumb
          make toolchain/compile V=s 2>&1 | tee toolchain-build.log

      - name: 编译内核和根文件系统
        run: |
          export TERM=dumb
          make target/linux/compile V=s 2>&1 | tee kernel-build.log
          make target/rootfs/compile V=s 2>&1 | tee rootfs-build.log
          make V=s 2>&1 | tee full-build.log

      - name: 检查关键文件
        run: |
          BUILD_DIR="build_dir/target-aarch64_cortex-a53_musl/linux-qualcommax_ipq60xx"
          echo "构建目录文件列表："
          ls -lh $BUILD_DIR
          
          # 动态查找内核镜像
          KERNEL_FILE=$(find $BUILD_DIR -name "Image" -o -name "zImage" -o -name "*kernel*.bin" | head -1)
          if [ -z "$KERNEL_FILE" ]; then
            echo "错误：未找到内核镜像"
            exit 1
          else
            echo "找到内核镜像：$KERNEL_FILE"
          fi
          
          # 检查根文件系统
          if [ ! -f "$BUILD_DIR/root.squashfs" ]; then
            echo "错误：根文件系统不存在"
            exit 1
          fi

      - name: 整理固件
        run: |
          FIRMWARE_DIR="bin/targets/qualcommax/ipq60xx"
          mkdir -p output
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.bin output/ || true
          cp -v $FIRMWARE_DIR/*zn_zn-m2*.img output/ || true

      - name: 上传固件（成功时）
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: zn-m2-${{ github.run_id }}
          files: output/*

      - name: 上传日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: |
            toolchain-build.log
            kernel-build.log
            rootfs-build.log
            full-build.log
            .config
          retention-days: 14
